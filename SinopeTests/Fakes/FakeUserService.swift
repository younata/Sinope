import Foundation
import Sinope
import Result
import CBGPromise

// this file was generated by Xcode-Better-Refactor-Tools
// https://github.com/tjarratt/xcode-better-refactor-tools

class FakeUserService : UserService, Equatable {
    init() {
    }

    private(set) var createAccountCallCount : Int = 0
    var createAccountStub : ((String, String) -> (Future<Result<String, SinopeError>>))?
    private var createAccountArgs : Array<(String, String)> = []
    func createAccountReturns(_ stubbedValues: (Future<Result<String, SinopeError>>)) {
        self.createAccountStub = {(email: String, password: String) -> (Future<Result<String, SinopeError>>) in
            return stubbedValues
        }
    }
    func createAccountArgsForCall(_ callIndex: Int) -> (String, String) {
        return self.createAccountArgs[callIndex]
    }
    func createAccount(_ email: String, password: String) -> (Future<Result<String, SinopeError>>) {
        self.createAccountCallCount += 1
        self.createAccountArgs.append((email, password))
        return self.createAccountStub!(email, password)
    }

    private(set) var loginCallCount : Int = 0
    var loginStub : ((String, String) -> (Future<Result<String, SinopeError>>))?
    private var loginArgs : Array<(String, String)> = []
    func loginReturns(_ stubbedValues: (Future<Result<String, SinopeError>>)) {
        self.loginStub = {(email: String, password: String) -> (Future<Result<String, SinopeError>>) in
            return stubbedValues
        }
    }
    func loginArgsForCall(_ callIndex: Int) -> (String, String) {
        return self.loginArgs[callIndex]
    }
    func login(_ email: String, password: String) -> (Future<Result<String, SinopeError>>) {
        self.loginCallCount += 1
        self.loginArgs.append((email, password))
        return self.loginStub!(email, password)
    }

    private(set) var addDeviceTokenCallCount : Int = 0
    var addDeviceTokenStub : ((String, String) -> (Future<Result<Void, SinopeError>>))?
    private var addDeviceTokenArgs : Array<(String, String)> = []
    func addDeviceTokenReturns(_ stubbedValues: (Future<Result<Void, SinopeError>>)) {
        self.addDeviceTokenStub = {(token: String, authToken: String) -> (Future<Result<Void, SinopeError>>) in
            return stubbedValues
        }
    }
    func addDeviceTokenArgsForCall(_ callIndex: Int) -> (String, String) {
        return self.addDeviceTokenArgs[callIndex]
    }
    func addDeviceToken(_ token: String, authToken: String) -> (Future<Result<Void, SinopeError>>) {
        self.addDeviceTokenCallCount += 1
        self.addDeviceTokenArgs.append((token, authToken))
        return self.addDeviceTokenStub!(token, authToken)
    }

    private(set) var deleteAccountCallCount : Int = 0
    var deleteAccountStub : ((String) -> (Future<Result<Void, SinopeError>>))?
    private var deleteAccountArgs : Array<(String)> = []
    func deleteAccountReturns(_ stubbedValues: (Future<Result<Void, SinopeError>>)) {
        self.deleteAccountStub = {(authToken: String) -> (Future<Result<Void, SinopeError>>) in
            return stubbedValues
        }
    }
    func deleteAccountArgsForCall(_ callIndex: Int) -> (String) {
        return self.deleteAccountArgs[callIndex]
    }
    func deleteAccount(_ authToken: String) -> (Future<Result<Void, SinopeError>>) {
        self.deleteAccountCallCount += 1
        self.deleteAccountArgs.append((authToken))
        return self.deleteAccountStub!(authToken)
    }

    static func reset() {
    }
}

func == (a: FakeUserService, b: FakeUserService) -> Bool {
    return a === b
}
