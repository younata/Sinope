import Sinope
import Result
import CBGPromise

// this file was generated by Xcode-Better-Refactor-Tools
// https://github.com/tjarratt/xcode-better-refactor-tools

class FakeNetworkClient : NetworkClient, Equatable {
    init() {
    }

    private(set) var getCallCount : Int = 0
    var getStub : ((NSURL, [String: String]) -> (Future<Result<NSData, NSError>>))?
    private var getArgs : Array<(NSURL, [String: String])> = []
    func getReturns(stubbedValues: (Future<Result<NSData, NSError>>)) {
        self.getStub = {(url: NSURL, headers: [String: String]) -> (Future<Result<NSData, NSError>>) in
            return stubbedValues
        }
    }
    func getArgsForCall(callIndex: Int) -> (NSURL, [String: String]) {
        return self.getArgs[callIndex]
    }
    func get(url: NSURL, headers: [String: String]) -> (Future<Result<NSData, NSError>>) {
        self.getCallCount += 1
        self.getArgs.append((url, headers))
        return self.getStub!(url, headers)
    }

    private(set) var putCallCount : Int = 0
    var putStub : ((NSURL, [String: String], NSData) -> (Future<Result<NSData, NSError>>))?
    private var putArgs : Array<(NSURL, [String: String], NSData)> = []
    func putReturns(stubbedValues: (Future<Result<NSData, NSError>>)) {
        self.putStub = {(url: NSURL, headers: [String: String], body: NSData) -> (Future<Result<NSData, NSError>>) in
            return stubbedValues
        }
    }
    func putArgsForCall(callIndex: Int) -> (NSURL, [String: String], NSData) {
        return self.putArgs[callIndex]
    }
    func put(url: NSURL, headers: [String: String], body: NSData) -> (Future<Result<NSData, NSError>>) {
        self.putCallCount += 1
        self.putArgs.append((url, headers, body))
        return self.putStub!(url, headers, body)
    }

    private(set) var postCallCount : Int = 0
    var postStub : ((NSURL, [String: String], NSData) -> (Future<Result<NSData, NSError>>))?
    private var postArgs : Array<(NSURL, [String: String], NSData)> = []
    func postReturns(stubbedValues: (Future<Result<NSData, NSError>>)) {
        self.postStub = {(url: NSURL, headers: [String: String], body: NSData) -> (Future<Result<NSData, NSError>>) in
            return stubbedValues
        }
    }
    func postArgsForCall(callIndex: Int) -> (NSURL, [String: String], NSData) {
        return self.postArgs[callIndex]
    }
    func post(url: NSURL, headers: [String: String], body: NSData) -> (Future<Result<NSData, NSError>>) {
        self.postCallCount += 1
        self.postArgs.append((url, headers, body))
        return self.postStub!(url, headers, body)
    }

    private(set) var deleteCallCount : Int = 0
    var deleteStub : ((NSURL, [String: String]) -> (Future<Result<NSData, NSError>>))?
    private var deleteArgs : Array<(NSURL, [String: String])> = []
    func deleteReturns(stubbedValues: (Future<Result<NSData, NSError>>)) {
        self.deleteStub = {(url: NSURL, headers: [String: String]) -> (Future<Result<NSData, NSError>>) in
            return stubbedValues
        }
    }
    func deleteArgsForCall(callIndex: Int) -> (NSURL, [String: String]) {
        return self.deleteArgs[callIndex]
    }
    func delete(url: NSURL, headers: [String: String]) -> (Future<Result<NSData, NSError>>) {
        self.deleteCallCount += 1
        self.deleteArgs.append((url, headers))
        return self.deleteStub!(url, headers)
    }

    static func reset() {
    }
}

func == (a: FakeNetworkClient, b: FakeNetworkClient) -> Bool {
    return a === b
}